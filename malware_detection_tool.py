import os
import hashlib
import psutil
import time
import sys
from datetime import datetime

# ✅ Define Safe Process List
SAFE_PROCESSES = ["explorer.exe", "chrome.exe", "python.exe", "systemd", "init", "bash"]

# ✅ Log file path
LOG_FILE = "sample_log_output.txt"

# ✅ Logging Function with UTF-8 encoding
def log(message):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {message}\n")
    print(message)

# ✅ File Hashing Function
def get_file_hash(filepath):
    try:
        with open(filepath, "rb") as file:
            return hashlib.sha256(file.read()).hexdigest()
    except Exception as e:
        log(f"❌ Error hashing {filepath}: {e}")
        return None

# ✅ Suspicious File Detection Function
def is_suspicious(file_path):
    filename = os.path.basename(file_path).lower()
    suspicious_keywords = ["virus", "malware", "trojan", "ransom", "spy", "keylogger", "stealer", "logger"]
    return (
        filename.endswith((".exe", ".vbs", ".bat", ".scr")) or
        any(word in filename for word in suspicious_keywords)
    )

# ✅ Directory Scanning Logic
def scan_directory(directory):
    log(f"📁 Scanning directory: {directory}")
    for root, _, files in os.walk(directory):
        for file in files:
            full_path = os.path.join(root, file)
            hash_val = get_file_hash(full_path)
            if hash_val:
                if is_suspicious(full_path):
                    log(f"🚨 ALERT: Suspicious file detected - {full_path}")
                else:
                    log(f"📄 File: {full_path} | SHA256: {hash_val[:12]}...")

# ✅ Process Monitoring Logic
def monitor_processes():
    log("🔍 Monitoring system processes...")
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            name = proc.info['name'].lower()
            if name not in SAFE_PROCESSES:
                log(f"⚠️ Suspicious process: {name} (PID: {proc.info['pid']})")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

# ✅ Full Scan Runner
def start_scan(scan_path):
    log("🚨 Malware Detection Tool Started")
    scan_directory(scan_path)
    monitor_processes()
    log("✅ Scan complete. Waiting 30 seconds...\n")

# ✅ Entry Point
if __name__ == "__main__":
    # Allow path as command-line argument
    if len(sys.argv) > 1:
        SCAN_PATH = sys.argv[1]
    else:
        SCAN_PATH = "C:\\Users\\Public" if os.name == 'nt' else "/home"

    while True:
        start_scan(SCAN_PATH)
        time.sleep(30)
